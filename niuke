1.java中赋值运算是有返回值的，返回值即为赋值的数值
2.finally中有return语句，当try执行到return时会执行finally中的代码，其中有return 就直接返回了
3.finally中不含return语句，那么当执行到return时，它会被保存等待finally执行完毕后返回，这个时候无论finally内部如何改变这个值，都不会影响返回结果！
4.Applet类是浏览器类库中最为重要的类，同时也是所有java小应用程序的基本类。在编写Applet程序时，首先必须引入java.applet.Applet包。 一个Applet应用程序从开始运行到结束时所经历的过程被称为Applet的生命周期。Applet的生命周期涉及init()、start()、stop()和destroy()四种方法，这4种方法都是Applet类的成员。 1、 public void init() init()方法是Applet运行的起点。当启动Applet程序时，系统首先调用此方法，以执行初始化任务。 2、public void start() start()方法是表明Applet程序开始执行的方法。当含有此Applet程序的Web页被再次访问时调用此方法。因此，如果每次访问Web页都需要执行一些操作的话，就需要在Applet程序中重载该方法。在Applet程序中，系统总是先调用init()方法，后调用start()方法。 3、 public void stop() stop()方法使Applet停止执行，当含有该Applet的Web页被其他页代替时也要调用该方法。 4、 public void destroy() destroy()方法收回Applet程序的所有资源，即释放已分配给它的所有资源。在Applet程序中，系统总是先调用stop()方法，后调用destroy()方法。5、 paint(Graphics g) paint(Graphics g)方法可以使Applet程序在屏幕上显示某些信息，如文字、色彩、背景或图像等。参数g是Graphics类的一个对象实例，实际上可以把g理解为一个画笔。对象g中包含了许多绘制方法，如drawstring()方法就是输出字符串。 repaint()方法的功能是，程序首先清除paint()方法以前所画的内容，然后再调用paint()方法。 
5.  init: 该方法的目的是为你的 Applet 提供所需的任何初始化。在 Applet 标记内的 param 标签被处理后调用该方法。
    start: 浏览器调用 init 方法后，该方法被自动调用。每当用户从其他页面返回到包含 Applet 的页面时，则调用该方法。
    stop: 当用户从包含 Applet 的页面移除的时候，该方法自动被调用。因此，可以在相同的 Applet 中反复调用该方法。
    destroy: 此方法仅当浏览器正常关闭时调用。因为 Applet 只有在 HTML 网页上有效，所以你不应该在用户离开包含 Applet 的页面后遗漏任何资源。
    paint: 该方法在 start() 方法之后立即被调用，或者在 Applet 需要重绘在浏览器的时候调用。paint() 方法实际上继承于 java.awt。
6.Semaphore：类，控制某个资源可被同时访问的个数;
  ReentrantLock：类，具有与使用synchronized方法和语句所访问的隐式监视器锁相同的一些基本行为和语义，但功能更强大；
  Future：接口，表示异步计算的结果；
  CountDownLatch： 类，可以用来在一个线程中等待多个线程完成任务的类。 
7. public Method[] getDeclaredMethods()返回类或接口声明的所有方法，包括public, protected, default (package) 访问和private方法的Method对象，但不包括继承的方法。当然也包括它所实现接口的方法。
public Method[] getMethods()返回类的所有public方法，包括其继承类的公用方法，当然也包括它所实现接口的方法。 
8.null表示没有地址；null可以赋值给引用变量，不能将null赋给基本类型变量，例如int、double、float、boolean
9.JDK8及以后，允许我们在接口中定义static方法和default方法。静态方法，只能通过接口名调用，不可以通过实现类的类名或者实现类的对象调用。default方法，只能通过接口实现类的对象来调用。当然如果接口中的默认方法不能满足某个实现类需要，那么实现类可以覆盖默认方法。如果两个接口中定义了一模一样的默认方法，并且一个实现类同时实现了这两个接口，那么必须在实现类中重写默认方法，否则编译失败。public default void defaultMethod(){}  (default不能省略);子类重写接口默认方法时，必须去掉default。
10.1. 只看尖括号里边的！！明确点和范围两个概念
   2. 如果尖括号里的是一个类，那么尖括号里的就是一个点，比如List<A>,List<B>,List<Object>
   3. 如果尖括号里面带有问号，那么代表一个范围，<? extends A> 代表小于等于A的范围，<? super A>代表大于等于A的范围，<?>代表全部范围
   4. 尖括号里的所有点之间互相赋值都是错，除非是俩相同的点
   5. 尖括号小范围赋值给大范围，对，大范围赋值给小范围，错。如果某点包含在某个范围里，那么可以赋值，否则，不能赋值
   7.补充：List既是点也是范围，当表示范围时，表示最大范围 
11.了解Math类常用的函数 Math.pow(a,b); Math.abs(a);Math.sqrt(a);Math.cos();Math.toRadians();
12.0x80 0x7F 表示-2^7～2^7-1
13.JSP 四大作用域： page (作用范围最小)、request 、session 、application （作用范围最大）。
    存储在application对象中的属性可以被同一个WEB应用程序中的所有Servlet和JSP页面访问。（属性作用范围最大）存储在session对象中的属性可以被属于同一个会话（浏览器打开直到关闭称为一次会话，且在此期间会话不失效）的所有Servlet和JSP页面访问。存储在request对象中的属性可以被属于同一个请求的所有Servlet和JSP页面访问（在有转发的情况下可以跨页面获取属性值），例如使用PageContext.forward和PageContext.include方法连接起来的多个Servlet和JSP页面。存储在pageContext对象中的属性仅可以被当前JSP页面的当前响应过程中调用的各个组件访问，例如，正在响应当前请求的JSP页面和它调用的各个自定义标签类。 
14. System是java.lang中的类，out为System中的一个静态成员，out是java.io.PrintStream类的对象，而println()是java.io.PrintStream类的方法，所有可以调用类.静态方法.println()方法。 
15.垃圾回收主要是针对堆区的回收，因为栈的内存是随着线程释放的，堆区分成三个区：年轻代(Young Generation),老年代(Old Generation),永久代(Permanent Generation,也就是方法区)
   永久代中存储的是final常量、static变量、常量池。
16.toLowerCase重新生产一个new String，存放在堆区，但是不改变传入的字符串的值。
17.又是i=i++,错了很多次了，长记性。
18.java虚拟机的功能：1.通过classloader寻找和加载class文件，2.解释字节码成为指令并执行，提供class文件的运行环境。3.进行运行期垃圾回收。4.提供与硬件间接交互的平台
19.list.remove()方法有两种调用形式1.remove(int index)：删除index索引下的元素，删除后将数组的下标向前移动。2.remove(Object o)，删除数组中的o元素，因此要注意是Integer对象，还是int基本类型
20.优化Hibernate所鼓励的7大措施：
   1.尽量使用many-to-one，避免使用单项one-to-many
   2.灵活使用单向one-to-many
   3.不用一对一，使用多对一代替一对一
   4.配置对象缓存，不使用集合缓存
   5.一对多使用Bag 多对一使用Set
   6.继承使用显示多态 HQL:from object polymorphism="exlicit" 避免查处所有对象
   7.消除大表，使用二级缓存
21.ThreadLocal的类声明：public class ThreadLocal<T>可以看出ThreadLocal并没有继承自Thread，也没有实现Runnable接口。
   ThreadLocal类为每一个线程都维护了自己独有的变量拷贝。每个线程都拥有了自己独立的一个变量。
   所以ThreadLocal重要作用并不在于多线程间的数据共享，而是数据的独立。
   由于每个线程在访问该变量时，读取和修改的，都是自己独有的那一份变量拷贝，不会被其他线程访问，
   变量被彻底封闭在每个访问的线程中。所以E对。
   ThreadLocal中定义了一个哈希表用于为每个线程都提供一个变量的副本
22.switch支持 int及以下（char， short， byte），String， Enum。原因呢？是因为switch是用来遍历的，所以不能支持float、double。long太大浪费资源？
23.redirect：请求重定向：客户端行为，本质上为2次请求，地址栏改变，前一次请求对象消失。举例：你去银行办事（forward.jsp），结果告诉你少带了东西，你得先去公安局办(index.html)临时身份证,这时你就会走出银行，自己前往公安局，地址栏变为index.html.
   forward：请求转发:服务器行为，地址栏不变。举例：你把钱包落在出租车上，你去警察局（forward.jsp）报案，警察局说钱包落在某某公司的出租车上（index.html)，这时你不用亲自去找某某公司的出租车,警察局让出租车自己给你送来，你只要在警察局等就行。所以地址栏不变，依然为forward.jsp
